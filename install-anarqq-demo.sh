#!/bin/bash

# AnarQ&Q Ecosystem Demo Installer
# Instalador autom√°tico para la demo del ecosistema AnarQ&Q
# Versi√≥n: 1.0.0
# Autor: AnarQorp
# Licencia: MIT

set -e

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuraci√≥n
DEMO_REPO="https://github.com/AnarQorp/anarqq-ecosystem-demo.git"
CORE_REPO="https://github.com/AnarQorp/anarqq-ecosystem-core.git"
INSTALL_DIR="$HOME/anarqq-ecosystem"
DEMO_DIR="$INSTALL_DIR/demo"
CORE_DIR="$INSTALL_DIR/core"

# Funci√≥n para imprimir mensajes con colores
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${PURPLE}"
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                                                               ‚ïë"
    echo "‚ïë               AnarQ&Q Ecosystem Demo Installer                ‚ïë"
    echo "‚ïë                                                               ‚ïë"
    echo "‚ïë           Instalador Autom√°tico del Ecosistema               ‚ïë"
    echo "‚ïë                     AnarQ&Q v1.0.0                           ‚ïë"
    echo "‚ïë                                                               ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo -e "${NC}"
}

print_step() {
    echo -e "${CYAN}üîÑ $1${NC}"
}

print_substep() {
    echo -e "   ${BLUE}‚Üí $1${NC}"
}

# Funci√≥n para verificar prerrequisitos
check_prerequisites() {
    print_step "Verificando prerrequisitos del sistema..."
    
    local errors=0
    
    # Verificar Git
    if command -v git &> /dev/null; then
        print_substep "Git est√° instalado: $(git --version)"
    else
        print_error "Git no est√° instalado"
        ((errors++))
    fi
    
    # Verificar Node.js
    if command -v node &> /dev/null; then
        local node_version=$(node --version)
        print_substep "Node.js est√° instalado: $node_version"
        
        # Verificar versi√≥n m√≠nima (18+)
        local major_version=$(echo $node_version | cut -d'.' -f1 | sed 's/v//')
        if [ "$major_version" -ge 18 ]; then
            print_substep "Versi√≥n de Node.js compatible (‚â•18)"
        else
            print_error "Node.js versi√≥n $node_version no es compatible (requiere ‚â•18)"
            ((errors++))
        fi
    else
        print_error "Node.js no est√° instalado"
        ((errors++))
    fi
    
    # Verificar npm
    if command -v npm &> /dev/null; then
        print_substep "npm est√° instalado: $(npm --version)"
    else
        print_error "npm no est√° instalado"
        ((errors++))
    fi
    
    # Verificar Docker (opcional)
    if command -v docker &> /dev/null; then
        print_substep "Docker est√° instalado: $(docker --version)"
    else
        print_warning "Docker no est√° instalado (opcional para contenedores)"
    fi
    
    # Verificar Docker Compose (opcional)
    if command -v docker-compose &> /dev/null; then
        print_substep "Docker Compose est√° instalado: $(docker-compose --version)"
    else
        print_warning "Docker Compose no est√° instalado (opcional para orquestaci√≥n)"
    fi
    
    if [ $errors -gt 0 ]; then
        print_error "Se encontraron $errors errores en los prerrequisitos"
        echo ""
        print_info "Para instalar los prerrequisitos:"
        echo "  ‚Ä¢ Git: sudo apt install git (Ubuntu/Debian) o brew install git (macOS)"
        echo "  ‚Ä¢ Node.js: https://nodejs.org/ o usar nvm"
        echo "  ‚Ä¢ Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    print_success "Todos los prerrequisitos est√°n satisfechos"
}

# Funci√≥n para crear directorio de instalaci√≥n
create_install_directory() {
    print_step "Creando directorio de instalaci√≥n..."
    
    if [ -d "$INSTALL_DIR" ]; then
        print_warning "El directorio $INSTALL_DIR ya existe"
        read -p "¬øDeseas continuar y sobrescribir? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Instalaci√≥n cancelada"
            exit 0
        fi
        rm -rf "$INSTALL_DIR"
    fi
    
    mkdir -p "$INSTALL_DIR"
    print_success "Directorio creado: $INSTALL_DIR"
}

# Funci√≥n para descargar repositorios (usando ZIP para evitar autenticaci√≥n)
download_repositories() {
    print_step "Descargando repositorios del ecosistema AnarQ&Q..."
    
    # URLs para descarga ZIP
    local demo_zip_url="https://github.com/AnarQorp/anarqq-ecosystem-demo/archive/refs/heads/main.zip"
    local core_zip_url="https://github.com/AnarQorp/anarqq-ecosystem-core/archive/refs/heads/main.zip"
    
    # Crear directorio temporal
    local temp_dir=$(mktemp -d)
    
    # Descargar demo usando ZIP
    print_substep "Descargando repositorio de la demo..."
    
    if download_and_extract_zip "$demo_zip_url" "$DEMO_DIR" "demo" "$temp_dir"; then
        print_success "Demo descargada en: $DEMO_DIR"
    else
        print_error "No se pudo descargar la demo"
        print_info "Esto puede ocurrir si:"
        print_info "  1. No tienes acceso al repositorio privado"
        print_info "  2. Tu conexi√≥n a internet tiene problemas"
        print_info "  3. El repositorio no est√° disponible"
        echo ""
        print_info "Contacta a anarqorp@proton.me para obtener acceso"
        cleanup_and_exit 1
    fi
    
    # Preguntar si tambi√©n quiere el core
    echo ""
    print_info "¬øDeseas tambi√©n descargar el repositorio completo del ecosistema?"
    print_info "Esto incluye todos los 15 m√≥dulos y el c√≥digo fuente completo (~7MB)"
    read -p "Descargar ecosistema completo? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_substep "Descargando repositorio del ecosistema completo..."
        
        if download_and_extract_zip "$core_zip_url" "$CORE_DIR" "core" "$temp_dir"; then
            print_success "Ecosistema completo descargado en: $CORE_DIR"
        else
            print_warning "No se pudo descargar el ecosistema completo (continuando solo con demo)"
        fi
    fi
    
    # Limpiar directorio temporal
    rm -rf "$temp_dir"
}

# Funci√≥n para limpiar y salir
cleanup_and_exit() {
    local exit_code=${1:-1}
    print_warning "Limpiando archivos temporales..."
    # Limpiar cualquier directorio temporal que pueda haber quedado
    rm -rf /tmp/anarqq-* 2>/dev/null || true
    exit $exit_code
}

# Funci√≥n auxiliar para descargar y extraer ZIP
download_and_extract_zip() {
    local zip_url="$1"
    local target_dir="$2"
    local repo_name="$3"
    local temp_dir="$4"
    
    local zip_file="$temp_dir/${repo_name}.zip"
    local extract_dir="$temp_dir/${repo_name}_extract"
    
    # Intentar descarga con curl
    print_substep "Descargando archivo ZIP..."
    if curl -L -f -s -o "$zip_file" "$zip_url" 2>/dev/null; then
        print_substep "Extrayendo archivos..."
        
        # Crear directorio de extracci√≥n
        mkdir -p "$extract_dir"
        
        # Extraer ZIP
        if command_exists unzip; then
            if unzip -q "$zip_file" -d "$extract_dir" 2>/dev/null; then
                # Buscar el directorio extra√≠do (GitHub crea un directorio con formato repo-branch)
                local extracted_dir=$(find "$extract_dir" -maxdepth 1 -type d -name "*-main" | head -1)
                
                if [ -n "$extracted_dir" ] && [ -d "$extracted_dir" ]; then
                    # Mover contenido al directorio objetivo
                    mkdir -p "$target_dir"
                    cp -r "$extracted_dir"/* "$target_dir/" 2>/dev/null || true
                    cp -r "$extracted_dir"/.[^.]* "$target_dir/" 2>/dev/null || true
                    return 0
                fi
            fi
        else
            print_warning "unzip no est√° disponible, intentando con otros m√©todos..."
        fi
    fi
    
    # Si llegamos aqu√≠, la descarga ZIP fall√≥
    return 1
}

# Funci√≥n para instalar dependencias
install_dependencies() {
    print_step "Instalando dependencias..."
    
    # Instalar dependencias de la demo
    print_substep "Instalando dependencias de la demo..."
    cd "$DEMO_DIR"
    npm install
    print_success "Dependencias de la demo instaladas"
    
    # Si existe el core, instalar sus dependencias tambi√©n
    if [ -d "$CORE_DIR" ]; then
        print_substep "Instalando dependencias del ecosistema completo..."
        cd "$CORE_DIR"
        npm install
        
        # Instalar dependencias del backend si existe
        if [ -d "backend" ]; then
            print_substep "Instalando dependencias del backend..."
            cd backend
            npm install
            cd ..
        fi
        
        print_success "Dependencias del ecosistema completo instaladas"
    fi
}

# Funci√≥n para configurar entorno
setup_environment() {
    print_step "Configurando entorno..."
    
    cd "$DEMO_DIR"
    
    # Copiar archivo de entorno si no existe
    if [ ! -f ".env" ] && [ -f ".env.example" ]; then
        print_substep "Creando archivo de configuraci√≥n .env..."
        cp .env.example .env
        print_success "Archivo .env creado desde .env.example"
    fi
    
    # Si existe el core, configurar tambi√©n
    if [ -d "$CORE_DIR" ]; then
        cd "$CORE_DIR"
        if [ ! -f ".env" ] && [ -f ".env.example" ]; then
            print_substep "Creando archivo .env para el ecosistema completo..."
            cp .env.example .env
        fi
        
        # Backend environment
        if [ -d "backend" ] && [ ! -f "backend/.env" ] && [ -f "backend/.env.example" ]; then
            print_substep "Creando archivo .env para el backend..."
            cp backend/.env.example backend/.env
        fi
    fi
}

# Funci√≥n para ejecutar tests b√°sicos
run_basic_tests() {
    print_step "Ejecutando tests b√°sicos..."
    
    cd "$DEMO_DIR"
    
    # Test de build de la demo
    print_substep "Probando build de la demo..."
    if npm run build &> /dev/null; then
        print_success "Build de la demo exitoso"
    else
        print_warning "Build de la demo fall√≥ (puede requerir configuraci√≥n adicional)"
    fi
    
    # Test b√°sico si existe
    if [ -f "test-basic.mjs" ]; then
        print_substep "Ejecutando test b√°sico..."
        if node test-basic.mjs &> /dev/null; then
            print_success "Test b√°sico pas√≥"
        else
            print_warning "Test b√°sico fall√≥ (puede requerir configuraci√≥n adicional)"
        fi
    fi
}

# Funci√≥n para crear scripts de acceso r√°pido
create_shortcuts() {
    print_step "Creando scripts de acceso r√°pido..."
    
    # Script para iniciar la demo
    cat > "$INSTALL_DIR/start-demo.sh" << 'EOF'
#!/bin/bash
echo "üöÄ Iniciando AnarQ&Q Ecosystem Demo..."
cd "$(dirname "$0")/demo"
npm run dev
EOF
    
    # Script para iniciar el ecosistema completo
    if [ -d "$CORE_DIR" ]; then
        cat > "$INSTALL_DIR/start-ecosystem.sh" << 'EOF'
#!/bin/bash
echo "üöÄ Iniciando AnarQ&Q Ecosystem Core..."
cd "$(dirname "$0")/core"

# Iniciar backend en background si existe
if [ -d "backend" ]; then
    echo "üì° Iniciando backend..."
    cd backend
    npm start &
    BACKEND_PID=$!
    cd ..
    echo "Backend iniciado con PID: $BACKEND_PID"
fi

# Iniciar frontend
echo "üé® Iniciando frontend..."
npm run dev
EOF
    fi
    
    # Script para Docker Compose si est√° disponible
    if command -v docker-compose &> /dev/null && [ -f "$DEMO_DIR/docker-compose.yml" ]; then
        cat > "$INSTALL_DIR/start-docker.sh" << 'EOF'
#!/bin/bash
echo "üê≥ Iniciando AnarQ&Q Ecosystem con Docker..."
cd "$(dirname "$0")/demo"
docker-compose up -d
echo "‚úÖ Servicios iniciados con Docker Compose"
echo "üìä Para ver logs: docker-compose logs -f"
echo "üõë Para detener: docker-compose down"
EOF
    fi
    
    # Hacer ejecutables
    chmod +x "$INSTALL_DIR"/*.sh
    
    print_success "Scripts de acceso r√°pido creados en: $INSTALL_DIR"
}

# Funci√≥n para mostrar informaci√≥n final
show_final_info() {
    print_header
    print_success "üéâ ¬°Instalaci√≥n completada exitosamente!"
    echo ""
    print_info "üìç Ubicaci√≥n de instalaci√≥n: $INSTALL_DIR"
    echo ""
    print_info "üöÄ Para iniciar la demo:"
    echo "   cd $DEMO_DIR"
    echo "   npm run dev"
    echo ""
    print_info "‚ö° O usar el script de acceso r√°pido:"
    echo "   $INSTALL_DIR/start-demo.sh"
    echo ""
    
    if [ -d "$CORE_DIR" ]; then
        print_info "üåê Para iniciar el ecosistema completo:"
        echo "   $INSTALL_DIR/start-ecosystem.sh"
        echo ""
    fi
    
    if [ -f "$INSTALL_DIR/start-docker.sh" ]; then
        print_info "üê≥ Para iniciar con Docker:"
        echo "   $INSTALL_DIR/start-docker.sh"
        echo ""
    fi
    
    print_info "üìö Documentaci√≥n:"
    echo "   ‚Ä¢ Demo: $DEMO_DIR/README.md"
    if [ -d "$CORE_DIR" ]; then
        echo "   ‚Ä¢ Ecosistema: $CORE_DIR/README.md"
    fi
    echo ""
    
    print_info "üîß Configuraci√≥n:"
    echo "   ‚Ä¢ Demo: $DEMO_DIR/.env"
    if [ -d "$CORE_DIR" ]; then
        echo "   ‚Ä¢ Ecosistema: $CORE_DIR/.env"
        echo "   ‚Ä¢ Backend: $CORE_DIR/backend/.env"
    fi
    echo ""
    
    print_info "üåê URLs por defecto (una vez iniciado):"
    echo "   ‚Ä¢ Frontend: http://localhost:8080"
    echo "   ‚Ä¢ Backend: http://localhost:3001"
    echo ""
    
    print_info "üìß Soporte: anarqorp@proton.me"
    print_info "üîó GitHub: https://github.com/AnarQorp"
    echo ""
    
    print_success "¬°Disfruta explorando el ecosistema AnarQ&Q! üöÄ"
}

# Funci√≥n principal
main() {
    print_header
    
    print_info "Este instalador configurar√° autom√°ticamente:"
    echo "  ‚Ä¢ Verificaci√≥n de prerrequisitos"
    echo "  ‚Ä¢ Descarga de repositorios"
    echo "  ‚Ä¢ Instalaci√≥n de dependencias"
    echo "  ‚Ä¢ Configuraci√≥n del entorno"
    echo "  ‚Ä¢ Tests b√°sicos"
    echo "  ‚Ä¢ Scripts de acceso r√°pido"
    echo ""
    
    read -p "¬øContinuar con la instalaci√≥n? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Instalaci√≥n cancelada"
        exit 0
    fi
    
    echo ""
    
    # Ejecutar pasos de instalaci√≥n
    check_prerequisites
    create_install_directory
    download_repositories
    install_dependencies
    setup_environment
    run_basic_tests
    create_shortcuts
    
    echo ""
    show_final_info
}

# Manejo de errores
trap 'print_error "Error durante la instalaci√≥n. Revisa los logs arriba."; exit 1' ERR

# Ejecutar instalador
main "$@"